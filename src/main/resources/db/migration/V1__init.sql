-- REFINITIV AND TBRICKS INPUT TABLES
CREATE TABLE INDEX (
      ID                   SERIAL           PRIMARY KEY
    , REF_DATE             DATE             NOT NULL
    , INSTRUMENT_ID        VARCHAR(50)      NOT NULL
    , SECURITY_DESCRIPTION VARCHAR(100)         NULL
    , TIME                 TIME             NOT NULL
    , PRICE                DOUBLE PRECISION NOT NULL

    , CONSTRAINT CHK_INDEX_PRICE CHECK (PRICE >= 0)
);

CREATE TABLE FUTURE (
      ID                     SERIAL           PRIMARY KEY
    , REF_DATE               DATE             NOT NULL
    , ISIN                   VARCHAR(50)      NOT NULL
    , TICKER                 VARCHAR(50)      NOT NULL
    , TIME                   TIME             NOT NULL
    , UNDERLYING_ID          VARCHAR(50)      NOT NULL
    , UNDERLYING_DESCRIPTION VARCHAR(100)         NULL
    , PRICE_CLOSE            DOUBLE PRECISION NOT NULL
    , PRICE_OPEN             DOUBLE PRECISION     NULL
    , PRICE_LOW              DOUBLE PRECISION     NULL
    , PRICE_HIGH             DOUBLE PRECISION     NULL
    , VOLUME                 DOUBLE PRECISION     NULL

    , CONSTRAINT CHK_FUTURE_PRICE_CLOSE CHECK (PRICE_CLOSE >= 0)
    , CONSTRAINT CHK_FUTURE_PRICE_OPEN  CHECK (PRICE_OPEN  >= 0)
    , CONSTRAINT CHK_FUTURE_PRICE_LOW   CHECK (PRICE_LOW   >= 0)
    , CONSTRAINT CHK_FUTURE_PRICE_HIGH  CHECK (PRICE_HIGH  >= 0)
    , CONSTRAINT CHK_FUTURE_VOLUME      CHECK (VOLUME      >= 0)
);

-- FUTURE END OF DAY
CREATE TABLE FUTURE_DAILY (
      ID                     SERIAL           PRIMARY KEY
    , REF_DATE               DATE             NOT NULL
    , ISIN                   VARCHAR(50)      NOT NULL
    , TICKER                 VARCHAR(50)      NOT NULL
    , UNDERLYING_ID          VARCHAR(50)      NOT NULL
    , UNDERLYING_DESCRIPTION VARCHAR(100)         NULL
    , PRICE_CLOSE            DOUBLE PRECISION NOT NULL
    , PRICE_OPEN             DOUBLE PRECISION     NULL
    , PRICE_LOW              DOUBLE PRECISION     NULL
    , PRICE_HIGH             DOUBLE PRECISION     NULL
    , VOLUME                 DOUBLE PRECISION     NULL

    , CONSTRAINT CHK_FUTURE_DAILY_PRICE_CLOSE CHECK (PRICE_CLOSE >= 0)
    , CONSTRAINT CHK_FUTURE_DAILY_PRICE_OPEN  CHECK (PRICE_OPEN  >= 0)
    , CONSTRAINT CHK_FUTURE_DAILY_PRICE_LOW   CHECK (PRICE_LOW   >= 0)
    , CONSTRAINT CHK_FUTURE_DAILY_PRICE_HIGH  CHECK (PRICE_HIGH  >= 0)
    , CONSTRAINT CHK_FUTURE_DAILY_VOLUME      CHECK (VOLUME      >= 0)
);

CREATE TABLE FUTURE_ANAGRAPHIC (
      ID          SERIAL       PRIMARY KEY
    , TICKER      VARCHAR(50)  NOT NULL
    , ISIN        VARCHAR(50)  NOT NULL
    , DESCRIPTION VARCHAR(255)     NULL
    , CURRENCY    VARCHAR(3)   NOT NULL
    , MATURITY    DATE         NOT NULL
);

CREATE TABLE POSITION (
      ID            SERIAL       PRIMARY KEY
    , REF_DATE      DATE         NOT NULL
    , PORTFOLIO_ID  VARCHAR(50)  NOT NULL
    , INSTRUMENT_ID VARCHAR(50)  NOT NULL
    , FAMILY        VARCHAR(20)      NULL
    , "group"       VARCHAR(20)      NULL
    , TYPE          VARCHAR(50)      NULL
    , CURRENCY      VARCHAR(3)   NOT NULL
    , QUANTITY      INTEGER      NOT NULL
    , ENTITY        VARCHAR(100)     NULL
    , DIVISION      VARCHAR(20)      NULL
    , MARKET_NAME   VARCHAR(50)      NULL

    , CONSTRAINT CHK_POSITION_QUANTITY CHECK (QUANTITY > 0)
);

-- STRATEGIES INPUT TABLES
CREATE TABLE ALGORITHM_AND_METRICS (
      ID                  SERIAL           PRIMARY KEY
    , TIME                TIMESTAMP        NOT NULL
    , PRICE               DOUBLE PRECISION NOT NULL
    , BUYSELL             VARCHAR(1)       NOT NULL
    , POSITION            INTEGER          NOT NULL
    , AVGPRICE            DOUBLE PRECISION     NULL
    , POSPL_TMINUS        DOUBLE PRECISION     NULL
    , POSPL_TPLUS         DOUBLE PRECISION     NULL
    , CONSOLIDATEDPL      DOUBLE PRECISION     NULL
    , TOTRUNNINGPL        DOUBLE PRECISION     NULL
    , POSINVERSION        BIT                  NULL
    , ROLLOVERTRADE       BIT                  NULL
    , ROLLOVERDATA        DATE                 NULL
    , DRAWDOWN            DOUBLE PRECISION     NULL
    , AVGDD               DOUBLE PRECISION     NULL
    , STDDD               DOUBLE PRECISION     NULL
    , DDDOWNLIM           DOUBLE PRECISION     NULL
    , DDPASS              BIT                  NULL
    , BUYSELL_NODD        VARCHAR(1)           NULL
    , POSITION_NODD       INTEGER              NULL
    , AVGPRICE_NODD       DOUBLE PRECISION     NULL
    , POSPL_TMINUS_NODD   DOUBLE PRECISION     NULL
    , POSPL_TPLUS_NODD    DOUBLE PRECISION     NULL
    , CONSOLIDATEDPL_NODD DOUBLE PRECISION     NULL
    , TOTRUNNINGPL_NODD   DOUBLE PRECISION     NULL
    , POSINVERIONS_NODD   BIT                  NULL
    , CUMPL               DOUBLE PRECISION     NULL
    , DPL                 DOUBLE PRECISION     NULL
    , PREZZO_ESEGUITO     DOUBLE PRECISION     NULL
    , DELTA_PREZZO        DOUBLE PRECISION     NULL

    , CONSTRAINT CHK_ALGORITHM_AND_METRICS_PRICE           CHECK (PRICE > 0)
    , CONSTRAINT CHK_ALGORITHM_AND_METRICS_PREZZO_ESEGUITO CHECK (PREZZO_ESEGUITO > 0)

);

CREATE TABLE SIGNAL (
      ID                SERIAL           PRIMARY KEY
    , TIMESTAMP         TIMESTAMP        NOT NULL
    , TRADEDATE         TIMESTAMP        NOT NULL
    , UNDERLYING        VARCHAR(50)      NOT NULL
    , TICKER_FUTURE     VARCHAR(50)      NOT NULL
    , BUY_SELL          VARCHAR(1)       NOT NULL
    , QUANTITY          INTEGER          NOT NULL
    , THEORETICAL_PRICE DOUBLE PRECISION NOT NULL

    , CONSTRAINT CHK_SIGNAL_QUANTITY          CHECK (QUANTITY > 0)
    , CONSTRAINT CHK_SIGNAL_THEORETICAL_PRICE CHECK (THEORETICAL_PRICE > 0)
);

CREATE TABLE "order" (
      ID                SERIAL           PRIMARY KEY
    , TIMESTAMP         TIMESTAMP        NOT NULL
    , TRADEDATE         TIMESTAMP        NOT NULL
    , UNDERLYING        VARCHAR(50)      NOT NULL
    , TICKER_FUTURE     VARCHAR(50)      NOT NULL
    , BUY_SELL          VARCHAR(1)       NOT NULL
    , QUANTITY          INTEGER          NOT NULL
    , THEORETICAL_PRICE DOUBLE PRECISION NOT NULL
    , PREZZO_ESEGUITO   DOUBLE PRECISION NOT NULL
    , DELTA_PREZZO      DOUBLE PRECISION NOT NULL

    , CONSTRAINT CHK_ORDER_QUANTITY          CHECK (QUANTITY > 0)
    , CONSTRAINT CHK_ORDER_THEORETICAL_PRICE CHECK (THEORETICAL_PRICE > 0)
    , CONSTRAINT CHK_ORDER_PREZZO_ESEGUITO   CHECK (PREZZO_ESEGUITO > 0)
);

CREATE TABLE STRATEGY_PERFORMANCE (
      ID          SERIAL           PRIMARY KEY
    , TIMESTAMP   TIME             NOT NULL
    , TRADE_DATE  DATE             NOT NULL
    , SHARP       DOUBLE PRECISION NOT NULL
    , SORTINO     DOUBLE PRECISION NOT NULL
    , MAXDRAWDOWN DOUBLE PRECISION NOT NULL
    , P_E_L       DOUBLE PRECISION NOT NULL
);

-- CONFIGURATION INPUT DATA
CREATE TABLE USER_PROFILING (
      ID                  SERIAL      PRIMARY KEY
    , UTENTE              VARCHAR(20) NOT NULL
    , TIPOLOGIA_UTENTE    VARCHAR(20) NOT NULL
    , CODICE_ABILITAZIONE VARCHAR(20) NOT NULL
);

CREATE TABLE ALGORITHM_CONFIGURATION (
      ID        SERIAL           PRIMARY KEY
    , REF_DATE  DATE             NOT NULL
    , ALGORITMO VARCHAR(20)      NOT NULL
    , PARAMETRO VARCHAR(20)      NOT NULL
    , VALORE    DOUBLE PRECISION NOT NULL
    , UTENZA    VARCHAR(20)      NOT NULL
    , TIMESTAMP TIME             NOT NULL
);
