-- REFINITIV AND TBRICKS INPUT TABLES
CREATE TABLE REF0_KAFKA_INDEX (
      ID                   SERIAL           PRIMARY KEY
    , REF_DATE             DATE             NOT NULL
    , INSTRUMENT_ID        VARCHAR(50)      NOT NULL
    , SECURITY_DESCRIPTION VARCHAR(100)         NULL
    , TIME                 TIME             NOT NULL
    , PRICE                DOUBLE PRECISION NOT NULL

    , CONSTRAINT CHK_INDEX_PRICE CHECK (PRICE >= 0)
);

/*
INSERT INTO ref0_kafka_index ( REF_DATE, INSTRUMENT_ID, SECURITY_DESCRIPTION, TIME, PRICE) VALUES ('2021-01-04', '.STOXX50E', 'ESTX 50 PR INDEX', '17:00:00', 3564.39);
INSERT INTO ref0_kafka_index ( REF_DATE, INSTRUMENT_ID, SECURITY_DESCRIPTION, TIME, PRICE) VALUES ('2021-01-05', '.STOXX50E', 'ESTX 50 PR INDEX', '12:05:03', 3547.85);
INSERT INTO ref0_kafka_index ( REF_DATE, INSTRUMENT_ID, SECURITY_DESCRIPTION, TIME, PRICE) VALUES ('2021-01-06', '.STOXX50E', 'ESTX 50 PR INDEX', '09:30:10', 3611.08);
INSERT INTO ref0_kafka_index ( REF_DATE, INSTRUMENT_ID, SECURITY_DESCRIPTION, TIME, PRICE) VALUES ('2021-01-07', '.STOXX50E', 'ESTX 50 PR INDEX', '13:45:00', 3622.42);
INSERT INTO ref0_kafka_index ( REF_DATE, INSTRUMENT_ID, SECURITY_DESCRIPTION, TIME, PRICE) VALUES ('2021-01-08', '.STOXX50E', 'ESTX 50 PR INDEX', '16:00:00', 3645.05);
INSERT INTO ref0_kafka_index ( REF_DATE, INSTRUMENT_ID, SECURITY_DESCRIPTION, TIME, PRICE) VALUES (CURRENT_DATE, '.STOXX50E', 'ESTX 50 PR INDEX', '11:56:00', 3577.99);
INSERT INTO ref0_kafka_index ( REF_DATE, INSTRUMENT_ID, SECURITY_DESCRIPTION, TIME, PRICE) VALUES (CURRENT_DATE, '.STOXX50E', 'ESTX 50 PR INDEX', '11:57:00', 3577.05);
INSERT INTO ref0_kafka_index ( REF_DATE, INSTRUMENT_ID, SECURITY_DESCRIPTION, TIME, PRICE) VALUES (CURRENT_DATE, '.STOXX50E', 'ESTX 50 PR INDEX', '11:58:00', 3576.47);
INSERT INTO ref0_kafka_index ( REF_DATE, INSTRUMENT_ID, SECURITY_DESCRIPTION, TIME, PRICE) VALUES (CURRENT_DATE, '.STOXX50E', 'ESTX 50 PR INDEX', '11:59:00', 3575.78);
INSERT INTO ref0_kafka_index ( REF_DATE, INSTRUMENT_ID, SECURITY_DESCRIPTION, TIME, PRICE) VALUES (CURRENT_DATE, '.STOXX50E', 'ESTX 50 PR INDEX',  LOCALTIME, 3575.78);
INSERT INTO ref0_kafka_index ( REF_DATE, INSTRUMENT_ID, SECURITY_DESCRIPTION, TIME, PRICE) VALUES (CURRENT_DATE, '.ALABARDA', 'ALABARD PR INDEX', '09:29:00', 1010.15);
*/

CREATE TABLE REF0_KAFKA_FUTURE (
      ID                     SERIAL           PRIMARY KEY
    , REF_DATE               DATE             NOT NULL
    , ISIN                   VARCHAR(50)      NOT NULL
    , TICKER                 VARCHAR(50)      NOT NULL
    , TIME                   TIME             NOT NULL
    , UNDERLYING_ID          VARCHAR(50)      NOT NULL
    , UNDERLYING_DESCRIPTION VARCHAR(100)         NULL
    , PRICE_CLOSE            DOUBLE PRECISION NOT NULL
    , PRICE_OPEN             DOUBLE PRECISION     NULL
    , PRICE_LOW              DOUBLE PRECISION     NULL
    , PRICE_HIGH             DOUBLE PRECISION     NULL
    , VOLUME                 DOUBLE PRECISION     NULL

    , CONSTRAINT CHK_FUTURE_PRICE_CLOSE CHECK (PRICE_CLOSE >= 0)
    , CONSTRAINT CHK_FUTURE_PRICE_OPEN  CHECK (PRICE_OPEN  >= 0)
    , CONSTRAINT CHK_FUTURE_PRICE_LOW   CHECK (PRICE_LOW   >= 0)
    , CONSTRAINT CHK_FUTURE_PRICE_HIGH  CHECK (PRICE_HIGH  >= 0)
    , CONSTRAINT CHK_FUTURE_VOLUME      CHECK (VOLUME      >= 0)
);

/*
INSERT INTO ref0_kafka_future (REF_DATE, ISIN, TICKER, TIME, UNDERLYING_ID, UNDERLYING_DESCRIPTION, PRICE_CLOSE, PRICE_OPEN, PRICE_LOW, PRICE_HIGH, VOLUME) VALUES ('2021-01-04', 'DE0009652388', 'VGH21', '08:00:00', '.STOXX50E', '.STOXX50E', 3564.39, 3561, 3560, 3566, 6);
INSERT INTO ref0_kafka_future (REF_DATE, ISIN, TICKER, TIME, UNDERLYING_ID, UNDERLYING_DESCRIPTION, PRICE_CLOSE, PRICE_OPEN, PRICE_LOW, PRICE_HIGH, VOLUME) VALUES ('2021-01-05', 'DE0009652388', 'VGH21', '08:01:00', '.STOXX50E', '.STOXX50E', 3547.85, 3540.66, 3540.66, 3547.85, 7);
INSERT INTO ref0_kafka_future (REF_DATE, ISIN, TICKER, TIME, UNDERLYING_ID, UNDERLYING_DESCRIPTION, PRICE_CLOSE, PRICE_OPEN, PRICE_LOW, PRICE_HIGH, VOLUME) VALUES ('2021-01-06', 'DE0009652388', 'VGH21', '08:02:00', '.STOXX50E', '.STOXX50E', 3611.08, 3611.02, 3610.84, 3612, 8);
INSERT INTO ref0_kafka_future (REF_DATE, ISIN, TICKER, TIME, UNDERLYING_ID, UNDERLYING_DESCRIPTION, PRICE_CLOSE, PRICE_OPEN, PRICE_LOW, PRICE_HIGH, VOLUME) VALUES ('2021-01-07', 'DE0009652388', 'VGH21', '08:03:00', '.STOXX50E', '.STOXX50E', 3622.42, 3622.42, 3510.01, 3625, 9);
INSERT INTO ref0_kafka_future (REF_DATE, ISIN, TICKER, TIME, UNDERLYING_ID, UNDERLYING_DESCRIPTION, PRICE_CLOSE, PRICE_OPEN, PRICE_LOW, PRICE_HIGH, VOLUME) VALUES (CURRENT_DATE, 'DE0009652388', 'VGH21', '08:00:00', '.STOXX50E', '.STOXX50E', 4564.39, 4561, 4560, 4566, 50);
INSERT INTO ref0_kafka_future (REF_DATE, ISIN, TICKER, TIME, UNDERLYING_ID, UNDERLYING_DESCRIPTION, PRICE_CLOSE, PRICE_OPEN, PRICE_LOW, PRICE_HIGH, VOLUME) VALUES (CURRENT_DATE, 'DE0009652388', 'VGH21', '08:01:00', '.STOXX50E', '.STOXX50E', 4547.85, 4540.66, 4540.66, 4547.85, 17);
INSERT INTO ref0_kafka_future (REF_DATE, ISIN, TICKER, TIME, UNDERLYING_ID, UNDERLYING_DESCRIPTION, PRICE_CLOSE, PRICE_OPEN, PRICE_LOW, PRICE_HIGH, VOLUME) VALUES (CURRENT_DATE, 'DE0009652388', 'VGH21', '08:02:00', '.STOXX50E', '.STOXX50E', 4611.08, 4611.02, 4610.84, 4612, 6);
INSERT INTO ref0_kafka_future (REF_DATE, ISIN, TICKER, TIME, UNDERLYING_ID, UNDERLYING_DESCRIPTION, PRICE_CLOSE, PRICE_OPEN, PRICE_LOW, PRICE_HIGH, VOLUME) VALUES (CURRENT_DATE, 'DE0009652388', 'VGH21', '09:03:00', '.STOXX50E', '.STOXX50E', 4622.42, 4622.42, 4510.01, 4625, 88);
*/

-- FUTURE END OF DAY
CREATE TABLE REF0_API_FUTURE_DAILY (
      ID                     SERIAL           PRIMARY KEY
    , REF_DATE               DATE             NOT NULL
    , ISIN                   VARCHAR(50)      NOT NULL
    , TICKER                 VARCHAR(50)      NOT NULL
    , UNDERLYING_ID          VARCHAR(50)      NOT NULL
    , UNDERLYING_DESCRIPTION VARCHAR(100)         NULL
    , PRICE_CLOSE            DOUBLE PRECISION NOT NULL
    , PRICE_OPEN             DOUBLE PRECISION     NULL
    , PRICE_LOW              DOUBLE PRECISION     NULL
    , PRICE_HIGH             DOUBLE PRECISION     NULL
    , VOLUME                 DOUBLE PRECISION     NULL

    , CONSTRAINT CHK_FUTURE_DAILY_PRICE_CLOSE CHECK (PRICE_CLOSE >= 0)
    , CONSTRAINT CHK_FUTURE_DAILY_PRICE_OPEN  CHECK (PRICE_OPEN  >= 0)
    , CONSTRAINT CHK_FUTURE_DAILY_PRICE_LOW   CHECK (PRICE_LOW   >= 0)
    , CONSTRAINT CHK_FUTURE_DAILY_PRICE_HIGH  CHECK (PRICE_HIGH  >= 0)
    , CONSTRAINT CHK_FUTURE_DAILY_VOLUME      CHECK (VOLUME      >= 0)
);

CREATE TABLE SSL0_IXP_FUTURE_ANAGRAPHIC (
      ID          SERIAL       PRIMARY KEY
    , TICKER      VARCHAR(50)  NOT NULL
    , ISIN        VARCHAR(50)  NOT NULL
    , DESCRIPTION VARCHAR(255)     NULL
    , CURRENCY    VARCHAR(3)   NOT NULL
    , MATURITY    DATE         NOT NULL
);

CREATE TABLE SSL0_IXP_POSITION (
      ID            SERIAL       PRIMARY KEY
    , REF_DATE      DATE         NOT NULL
    , PORTFOLIO_ID  VARCHAR(50)  NOT NULL
    , INSTRUMENT_ID VARCHAR(50)  NOT NULL
    , POSITION_ID   VARCHAR(200) NOT NULL
    , FAMILY        VARCHAR(20)      NULL
    , "group"       VARCHAR(20)      NULL
    , TYPE          VARCHAR(50)      NULL
    , CURRENCY      VARCHAR(3)   NOT NULL
    , POSITION      INTEGER      NOT NULL
    , ENTITY        VARCHAR(100)     NULL
    , DIVISION      VARCHAR(20)      NULL
    , MARKET_NAME   VARCHAR(50)      NULL

    , CONSTRAINT CHK_POSITION_QUANTITY CHECK (QUANTITY > 0)
);

-- STRATEGIES INPUT TABLES
CREATE TABLE VIS10_API_ALGORITHM_AND_METRICS (
      ID                  SERIAL           PRIMARY KEY
    , TIME                TIMESTAMP        NOT NULL
    , PRICE               DOUBLE PRECISION NOT NULL
    , BUYSELL             VARCHAR(1)       NOT NULL
    , QUANTITY            INTEGER          NOT NULL
    , POSITION            INTEGER          NOT NULL
    , AVGPRICE            DOUBLE PRECISION     NULL
    , POSPL_TMINUS        DOUBLE PRECISION     NULL
    , POSPL_TPLUS         DOUBLE PRECISION     NULL
    , CONSOLIDATEDPL      DOUBLE PRECISION     NULL
    , TOTRUNNINGPL        DOUBLE PRECISION     NULL
    , POSINVERSION        BIT                  NULL
    , ROLLOVERTRADE       BIT                  NULL
    , ROLLOVERDATA        DATE                 NULL
    , DRAWDOWN            DOUBLE PRECISION     NULL
    , AVGDD               DOUBLE PRECISION     NULL
    , STDDD               DOUBLE PRECISION     NULL
    , DDDOWNLIM           DOUBLE PRECISION     NULL
    , DDPASS              BIT                  NULL
    , BUYSELL_NODD        VARCHAR(1)           NULL
    , POSITION_NODD       INTEGER              NULL
    , AVGPRICE_NODD       DOUBLE PRECISION     NULL
    , POSPL_TMINUS_NODD   DOUBLE PRECISION     NULL
    , POSPL_TPLUS_NODD    DOUBLE PRECISION     NULL
    , CONSOLIDATEDPL_NODD DOUBLE PRECISION     NULL
    , TOTRUNNINGPL_NODD   DOUBLE PRECISION     NULL
    , POSINVERIONS_NODD   BIT                  NULL
    , CUMPL               DOUBLE PRECISION     NULL
    , DPL                 DOUBLE PRECISION     NULL
    , EXECUTED_PRICE      DOUBLE PRECISION     NULL
    , DELTA_PRICE         DOUBLE PRECISION     NULL

    , CONSTRAINT CHK_ALGORITHM_AND_METRICS_PRICE           CHECK (PRICE > 0)
    , CONSTRAINT CHK_ALGORITHM_AND_METRICS_PREZZO_ESEGUITO CHECK (EXECUTED_PRICE > 0)

);

CREATE TABLE VIS10_API_SIGNAL (
      ID_SIGNAL         SERIAL           PRIMARY KEY
    , TIMESTAMP         TIMESTAMP        NOT NULL
    , TRADEDATE         TIMESTAMP        NOT NULL
    , UNDERLYING        VARCHAR(50)      NOT NULL
    , TICKER_FUTURE     VARCHAR(50)      NOT NULL
    , BUY_SELL          VARCHAR(1)       NOT NULL
    , QUANTITY          INTEGER          NOT NULL
    , THEORETICAL_PRICE DOUBLE PRECISION NOT NULL

    , CONSTRAINT CHK_SIGNAL_QUANTITY          CHECK (QUANTITY > 0)
    , CONSTRAINT CHK_SIGNAL_THEORETICAL_PRICE CHECK (THEORETICAL_PRICE > 0)
);

CREATE TABLE VIS10_API_ORDER (
      ID_ORDER             SERIAL           PRIMARY KEY
    , ID_SIGNAL            INTEGER          NOT NULL
    , TIMESTAMP            TIMESTAMP        NOT NULL
    , TRADEDATE            TIMESTAMP        NOT NULL
    , UNDERLYING           VARCHAR(50)      NOT NULL
    , PORTFOLIO_ID         VARCHAR(50)      NOT NULL
    , TICKER_FUTURE        VARCHAR(50)      NOT NULL
    , STATUS               VARCHAR(50)      NOT NULL
    , BUY_SELL             VARCHAR(1)       NOT NULL
    , THEORETICAL_QUANTITY INTEGER          NOT NULL
    , QUANTITY             INTEGER          NOT NULL
    , THEORETICAL_POSITION INTEGER          NOT NULL
    , LIVE_POSITION        INTEGER          NOT NULL
    , THEORETICAL_PRICE    DOUBLE PRECISION NOT NULL
    , PREZZO_EFFETTIVO     DOUBLE PRECISION NOT NULL
    , DELTA_PREZZO         DOUBLE PRECISION NOT NULL

    , CONSTRAINT CHK_ORDER_QUANTITY          CHECK (QUANTITY > 0)
    , CONSTRAINT CHK_ORDER_THEORETICAL_PRICE CHECK (THEORETICAL_PRICE > 0)
    , CONSTRAINT CHK_ORDER_PREZZO_EFFETTIVO  CHECK (PREZZO_EFFETTIVO > 0)
);

CREATE TABLE VIS10_API_STRATEGY_PERFORMANCE (
      ID          SERIAL           PRIMARY KEY
    , TIMESTAMP   TIME             NOT NULL
    , TRADE_DATE  DATE             NOT NULL
    , SHARP       DOUBLE PRECISION NOT NULL
    , SORTINO     DOUBLE PRECISION NOT NULL
    , MAXDRAWDOWN DOUBLE PRECISION NOT NULL
    , P_E_L       DOUBLE PRECISION NOT NULL
);

-- CONFIGURATION INPUT DATA
CREATE TABLE VIS10_API_USER_PROFILING (
      ID                  SERIAL      PRIMARY KEY
    , UTENTE              VARCHAR(20) NOT NULL
    , TIPOLOGIA_UTENTE    VARCHAR(20) NOT NULL
    , CODICE_ABILITAZIONE VARCHAR(20) NOT NULL
);

CREATE TABLE VIS10_API_ALGORITHM_CONFIGURATION (
      ID        SERIAL           PRIMARY KEY
    , REF_DATE  DATE             NOT NULL
    , ALGORITMO VARCHAR(20)      NOT NULL
    , PARAMETRO VARCHAR(20)      NOT NULL
    , VALORE    DOUBLE PRECISION NOT NULL
    , UTENZA    VARCHAR(20)      NOT NULL
    , TIMESTAMP TIME             NOT NULL
);
